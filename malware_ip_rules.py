import requests

def generate_yara_rules(ip_list, max_strings_per_rule, rule_name):
    rule_count = 1
    rule_strings = []

    for i, ip in enumerate(ip_list, start=1):
        rule_strings.append('"{}"'.format(ip.strip()))

        if i % max_strings_per_rule == 0 or i == len(ip_list):
            rule = 'rule {}_{}\n{{\n\tstrings:\n'.format(rule_name, rule_count)
            rule += '\n'.join('\t\t$ip{} = {}'.format(j+1, rule_strings[j]) for j in range(len(rule_strings)))
            rule += '\n\n\tcondition:\n\t\tany of them\n}\n\n'
            yield rule

            rule_count += 1
            rule_strings = []

def fetch_ip_list(url):
    response = requests.get(url)
    lines = response.text.splitlines()

    ip_list = []
    for line in lines:
        if not line.startswith("#"):
            ip_list.append(line)

    return ip_list

def write_yara_rules_file(rules, filename):
    with open(filename, "w") as file:
        file.write('import "pe"\n\n')
        file.writelines(rules)

url = "https://raw.githubusercontent.com/blocklistproject/Lists/master/malware.ip"
ip_list = fetch_ip_list(url)
rule_name="malicious_ip"
max_strings_per_rule = 9000 # ensures the yara string rule limit is not reached
rules = generate_yara_rules(ip_list, max_strings_per_rule,rule_name)
write_yara_rules_file(rules, "malware_ip_addrs.yara")

### Custom rule set template
### Must be a simple list of IP addresses terminated with a newline
### charicter, or a list of URL's or really any list of strings you
### want to include in a yara ruleset
#url = "https://raw.githubusercontent.com/blocklistproject/Lists/master/"
#ip_list = fetch_ip_list(url)
#rule_name="_ip"
#max_strings_per_rule = 9000
#rules = generate_yara_rules(ip_list, max_strings_per_rule,rule_name)
#write_yara_rules_file(rules, ".yara")
